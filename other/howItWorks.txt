*********************************
* =>> give
* <<== takes
* ... and so on for each element
*********************************

User inputs data to form in taxtarea section:

data = 'Fruits\n Apples\n Berries\n  Kliukva\n  Zemlianika\nVegitable\n Kartoshka';

	Fruits
    -Apples             
    -Berries        
    --Kliukva             
    --Zemlianika        
    Vegitable       
    -Kartoshka

Where '-' simbol its one spase, '--' - two spaces and so on.

This data takes DataString constructor, which method prepareData makes the array of objects:

	function DataString(str) {                       
		this.data = str;
	}
    
	DataString.prototype.prepareData = function () {
		var elements = this.data.split('\n');        
		var opt = null;                              
		var el = null; 
		var i;
		for (i = 0; i < elements.length; i += 1) {
			el = elements[i];
			opt = {};
			opt.nesting = el.lastIndexOf(' ') + 1;   
			opt.value = el.slice(opt.nesting);      
			elements[i] = opt;
		}
		return elements;
	};

	data = new DataString(data).prepareData =>>	[ { nesting=0,  value="Fruits" },
												  { nesting=1,  value="Apples" },
												  { nesting=1,  value="Berries" },
												  { nesting=2,  value="Kliukva" },
												  { nesting=2,  value="Zemlianika" },	
												  { nesting=0,  value="Vegitable" },	
												  { nesting=1,  value="Kartoshka" } ]

nesting property - nesting level (where will be each 'LI' element in DOM tree);
value property - value of each peace of data without spaces at the begin.

Constructor Member serve for making li element. It does method makeContLI:

	function Member(opt) {                      <<== { nesting=0,  value="Fruits" } and so on ...
		this.value = opt.value;
		this.nesting = opt.nesting;
    }
	
	Member.prototype.makeContLI = function () {
		var li = document.createElement('LI');
		li.innerHTML = this.value;
		return li;                               =>> <li>Fruits</li> and so on ...
    };
	
Constructor ListConstructor makes 'UL' list.	

	function ListConstructor(str) {
		this.data = new DataString(str).prepareData();   <<== [ { nesting=0,  value="Fruits" },
                                                                { nesting=1,  value="Apples" },
                                                                { nesting=1,  value="Berries" },
                                                                { nesting=2,  value="Kliukva" },
                                                                { nesting=2,  value="Zemlianika" },	 
                                                                { nesting=0,  value="Vegitable" },	
                                                                { nesting=1,  value="Kartoshka" } ]
    }
	
	ListConstructor.prototype.makeMembers = function () {
		var memb = [];
			var i, el;
			var len = this.data.length;
			for (i = 0; i < len; i += 1) {
			el = this.data[i];
			memb[i] = new Member(el);
		}
		this.members = memb; =>> [  { value="Fruits", nesting=0, makeContLI=function()}, 
                                    { value="Apples", nesting=1, makeContLI=function()},
                                    { value="Berries", nesting=1, makeContLI=function()}, 
                                    { value="Kliukva", nesting=2, makeContLI=function()},
                                    { value="Zemlianika", nesting=2, makeContLI=function()},
                                    { value="Vegitable", nesting=0, makeContLI=function()}, 
                                    { value="Kartoshka", nesting=1, makeContLI=function()}  ]
	};

    ListConstructor.prototype.makeList = function () {
        var lst = document.createElement('UL');-------------outer UL(container);
        lst.setAttribute('data-depth', -1);
        var uls = {};---------------------------------------object for stote links on all ULs
        uls['-1'] = lst;
        this.members.push({});
        var i, elm, nest, ul, li;
        for (i = 0; i < this.members.length - 1; i += 1) {
            elm = this.members[i];------------------------- <<== { value="Fruits", nesting=0, makeContLI=function()} and so on ...
            nest = elm.nesting;---------------------------- <<== nesting = 0 ...
            if (nest < this.members[i + 1].nesting) { ----- checks if nesting = 0 for Fruits < nesting = 1 for Apples and so on ...
                ul = document.createElement('UL'); -------- than Apples will be nest in Fruits, creates container ul(0) for it and so on ...
                ul.setAttribute('data-depth', nest);
                uls[nest] = ul; --------------------------- save link on this ul(0) and so on ...
                li = this.members[i].makeContLI(); -------- make li(Fruits) container for our ul(0), <li>Eruits</li>and so on ...
                li.appendChild(ul); ----------------------- =>>  <li>Fruits
                                                                    <ul data-depth="0"></ul>
                                                                 </li>	
                uls[nest - 1].appendChild(li); ------------ there is previous ul, and our li Fruits appends to ul(-1) and so on ...
                                                            =>>  <ul data-depth="-1">
                                                                    <li>Fruits
                                                                        <ul data-depth="0"><li>Apples</li></ul>
                                                                    </li>	
                                                                 </ul>	
                //(this.members[i]).li = li; -------------- { value="Fruits", nesting=0, makeContLI=function(), li=<li>Fruits...} and so on ...
            } else { -------------------------------------- in else cases
                li = this.members[i].makeContLI(); -------- make LI and so on ...
                uls[nest - 1].appendChild(li); ------------ li without nesting ul appends to his parent and so on ...
                //(this.members[i]).li = li;
            }
        }
        //this.members.pop(this.members.length - 1);
		this.lst = lst;  ==>>   <ul data-depth="-1">
                                    <li>Fruits
                                        <ul data-depth="0">
                                            <li>Apples</li>
                                            <li>Berries
                                                <ul data-depth="1">
                                                    <li>Kliukva</li>
                                                    <li>Zemlianika</li>
                                                </ul>
                                            </li>
                                        </ul>
                                    </li>
                                    <li>Vegitable
                                        <ul data-depth="0">
                                            <li>Kartoshka</li>
                                        </ul>
                                    </li>
                                </ul>
    };
	
------------------- dont use now!!!---------------------------------
	ListConstructor.prototype.makeStructure = function () { 
		var struct = {};
		var i, el;
		for (i = 0; i < this.members.length; i += 1) {
			el = this.members[i];
			struct[el.value] = el;
		}
		this.structure = struct;
	};
-------------------------------------------------------------------

    function UserList(str) {
        var ul = new ListConstructor(str);
        ul.makeMembers();
        ul.makeList();
        //ul.makeStructure();
        this.list = ul.lst;
        //this.structure = ul.structure;
    }

    return new UserList(str).list; ----------------------its rezult
	
	